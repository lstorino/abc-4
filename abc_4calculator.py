# -*- coding: utf-8 -*-
"""ABC-4Calculator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13xu-3qeySWacr-HPaxGGrIKFVKcYdVMe
"""



pip install reportlab

import json
import tkinter as tk
from tkinter import ttk, messagebox
from reportlab.lib.pagesizes import letter
from reportlab.pdfgen import canvas

# Load ingredient ABC values from JSON
ingredient_data = {
    "Corn": 50,
    "Soybean Meal": 120,
    "Wheat": 80,
    "Fish Meal": 250,
    "Limestone": 400
}

species_thresholds = {
    "Piglets 0-10 days": (200, 250),
    "Piglets 11-24 days": (250, 300)
}

def save_formulation():
    formulation = {
        "name": entry_name.get(),
        "date": entry_date.get(),
        "species": species_var.get(),
        "ingredients": []
    }

    total_abc = 0
    for row in table_rows:
        ingredient = row["ingredient_var"].get()
        inclusion = row["inclusion_var"].get()

        if ingredient and inclusion:
            inclusion = float(inclusion)
            abc_value = ingredient_data.get(ingredient, 0)
            contribution = (abc_value * inclusion) / 100
            row["abc_var"].set(f"{contribution:.2f}")
            total_abc += contribution

            formulation["ingredients"].append({
                "ingredient": ingredient,
                "inclusion": inclusion,
                "abc_contribution": contribution
            })

    total_abc_label.config(text=f"Total ABC: {total_abc:.2f} meq")

    # Check species threshold
    if species_var.get() in species_thresholds:
        min_val, max_val = species_thresholds[species_var.get()]
        if total_abc < min_val or total_abc > max_val:
            messagebox.showwarning("Warning", "ABC value is out of the recommended range!")

    with open("formulations.json", "a") as f:
        json.dump(formulation, f, indent=4)
        f.write("\n")
    messagebox.showinfo("Saved", "Formulation saved successfully!")

def export_to_pdf():
    filename = f"{entry_name.get()}_{entry_date.get()}.pdf"
    c = canvas.Canvas(filename, pagesize=letter)
    c.drawString(100, 750, f"Formulation Name: {entry_name.get()}")
    c.drawString(100, 730, f"Date: {entry_date.get()}")
    c.drawString(100, 710, f"Species: {species_var.get()}")
    y = 690

    c.drawString(100, y, "Ingredient")
    c.drawString(250, y, "Inclusion (%)")
    c.drawString(400, y, "ABC Contribution (meq)")
    y -= 20

    for row in table_rows:
        ingredient = row["ingredient_var"].get()
        inclusion = row["inclusion_var"].get()
        abc = row["abc_var"].get()

        if ingredient:
            c.drawString(100, y, ingredient)
            c.drawString(250, y, inclusion)
            c.drawString(400, y, abc)
            y -= 20

    c.drawString(100, y-20, f"Total ABC: {total_abc_label.cget('text')}")
    c.save()
    messagebox.showinfo("Exported", f"PDF saved as {filename}")

!pip install streamlit



#To run this on colab, it can create a streaming webapp to support the other steps
!streamlit run script.py & npx localtunnel --port 8501

# UI Setup
root = tk.Tk()
root.title("ABC-4 Calculator")

# Formulation Name & Date
entry_name = tk.Entry(root, width=20)
entry_name.grid(row=0, column=1)
tk.Label(root, text="Formulation Name:").grid(row=0, column=0)

entry_date = tk.Entry(root, width=20)
entry_date.grid(row=0, column=3)
tk.Label(root, text="Date:").grid(row=0, column=2)

# Species Selection
species_var = tk.StringVar()
species_dropdown = ttk.Combobox(root, textvariable=species_var, values=list(species_thresholds.keys()))
species_dropdown.grid(row=1, column=1, columnspan=2)
tk.Label(root, text="Select Species:").grid(row=1, column=0)

#Tables
# Table Headers
tk.Label(root, text="Ingredient").grid(row=2, column=0)
tk.Label(root, text="Inclusion (%)").grid(row=2, column=1)
tk.Label(root, text="ABC Contribution").grid(row=2, column=2)

# Table Rows
table_rows = []
ingredient_list = list(ingredient_data.keys())

for i in range(20):
    ingredient_var = tk.StringVar()
    ingredient_dropdown = ttk.Combobox(root, textvariable=ingredient_var, values=ingredient_list)
    ingredient_dropdown.grid(row=i+3, column=0)

    inclusion_var = tk.StringVar()
    inclusion_entry = tk.Entry(root, textvariable=inclusion_var, width=10)
    inclusion_entry.grid(row=i+3, column=1)

    abc_var = tk.StringVar()
    abc_label = tk.Label(root, textvariable=abc_var)
    abc_label.grid(row=i+3, column=2)

    table_rows.append({"ingredient_var": ingredient_var, "inclusion_var": inclusion_var, "abc_var": abc_var})

# Total ABC Label
total_abc_label = tk.Label(root, text="Total ABC: 0 meq")
total_abc_label.grid(row=24, column=1)

# Buttons
save_button = tk.Button(root, text="Save Formulation", command=save_formulation)
save_button.grid(row=25, column=0)

export_button = tk.Button(root, text="Export to PDF", command=export_to_pdf)
export_button.grid(row=25, column=1)

root.mainloop()